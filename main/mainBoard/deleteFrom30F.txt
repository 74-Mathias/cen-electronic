
/**
 * Call-back when Data send some notification message (like Position Reached, Position failed ...)
 */
void mainBoardCallbackRawData(const Device* device,
        char header,
        InputStream* inputStream) {

//    if (header == NOTIFY_MOTION_STATUS || header == COMMAND_NOTIFY_TEST || header == COMMAND_PLIERS_2011_OPEN) {
    // MOTOR BOARD notification
    if (header == NOTIFY_MOTION_STATUS) {
        /*
        appendString(getOutputStreamLogger(INFO), "\nNotification : From MOTOR BOARD \n");
        // NOTIFY_MOTION_STATUS / COMMAND_NOTIFY_TEST
        checkIsChar(inputStream, header);
        // status
        unsigned char status = readHex2(inputStream);
        // separator
        checkIsChar(inputStream, '-');
        // x
        unsigned int x = readHex4(inputStream);
        // separator
        checkIsChar(inputStream, '-');
        // y
        unsigned int y = readHex4(inputStream);
        // separator
        checkIsChar(inputStream, '-');
        // angle in ddeg
        unsigned int angle = readHex4(inputStream);

        updateRobotPosition(x, y, angle);
        setRobotPositionChanged();
        
        // FOR DEBUG AND MOTHER BOARD
        OutputStream* outputStream = &(compositePcAndDebugOutputStream.outputStream);
        append(outputStream, header);
        appendHex2(outputStream, status);
        appendSeparator(outputStream);
        appendHex4(outputStream, x);
        appendSeparator(outputStream);
        appendHex4(outputStream, y);
        appendSeparator(outputStream);
        appendHex4(outputStream, angle);

        // ready for next motion instruction Index
        setReadyForNextMotion(true);
        // Robot finished the trajectory
        instructionType = INSTRUCTION_TYPE_NO_MOVE;
        */
    }
    // STRATEGY BOARD notification message of MOTOR => Must be relayed TO MOTOR
    else if (header == COMMAND_MOTION_SPLINE_ABSOLUTE || header == COMMAND_MOTION_SPLINE_RELATIVE) {
        /*
        appendString(getOutputStreamLogger(INFO), "Notification : Spline : From STRATEGY BOARD : relayed to MOTOR_BOARD \n");
        appendStringAndDec(getOutputStreamLogger(INFO), "getDriverResponseBuffer:", getBufferElementsCount(getDriverResponseBuffer()));
        // forwardCallbackRawDataTo(inputStream, &debugOutputStream, device, header, DEVICE_MODE_INPUT);
        OutputStream* outputStream = &(compositeDriverAndDebugOutputStream.outputStream);
        // OutputStream* outputStream = &debugOutputStream;

        readHex(inputStream);
        // appendString(outputStream, ",header=");
        append(outputStream, header);

        float x = readHex4(inputStream);
        // appendString(outputStream, ",x=");
        appendHex4(outputStream, x);

        checkIsChar(inputStream, '-');
        appendSeparator(outputStream);

        float y = readHex4(inputStream);
        // appendString(outputStream, ",y=");
        appendHex4(outputStream, y);

        checkIsChar(inputStream, '-');
        appendSeparator(outputStream);

        float angle = readHex4(inputStream);
        // appendString(outputStream, ",angle=");
        appendHex4(outputStream, angle);

        checkIsChar(inputStream, '-');
        appendSeparator(outputStream);

        signed char dist0 = readHex2(inputStream);
        // appendString(outputStream, ",dist0=");
        appendHex2(outputStream, dist0);

        checkIsChar(inputStream, '-');
        appendSeparator(outputStream);

        signed char dist1 = readHex2(inputStream);
        // appendString(outputStream, ",dist1=");
        appendHex2(outputStream, dist1);

        checkIsChar(inputStream, '-');
        appendSeparator(outputStream);

        signed char a = readHex(inputStream);
        // appendString(outputStream, ",a=");
        appendHex(outputStream, a);

        signed char s = readHex(inputStream);
        // appendString(outputStream, ",s=");
        appendHex(outputStream, s);
    
        if (dist0 < 0) {
            appendString(getOutputStreamLogger(INFO), "\nMotion Backward !");
            instructionType = INSTRUCTION_TYPE_BACKWARD;
        }
        else {
            appendString(getOutputStreamLogger(INFO), "\nMotion Forward !");
            instructionType = INSTRUCTION_TYPE_FORWARD;
        }        
        // forwardCallbackRawDataTo(inputStream, &(compositeDriverAndDebugOutputStream.outputStream), device, header, DEVICE_MODE_INPUT);
        transmitFromDriverRequestBuffer();
        */
    } else if (header == COMMAND_MOTION_LEFT_IN_DECI_DEGREE || header == COMMAND_MOTION_RIGHT_IN_DECI_DEGREE) {
        /*
        appendString(getOutputStreamLogger(INFO), "Notification : Rotation : From STRATEGY BOARD : relayed to MOTOR_BOARD \n");
        instructionType = INSTRUCTION_TYPE_ROTATION;
        forwardCallbackRawDataTo(inputStream, &(compositeDriverAndDebugOutputStream.outputStream), device, header, DEVICE_MODE_INPUT);
        transmitFromDriverRequestBuffer();
        */
    } 
    // Mechanical Board notification
    else if (header == NOTIFY_INFRARED_DETECTOR_DETECTION) {
        /*
        appendString(getOutputStreamLogger(INFO), "\nNotification : From MECHANICAL BOARD :\n");
        checkIsChar(inputStream, NOTIFY_INFRARED_DETECTOR_DETECTION);
        // type
        unsigned char type = readHex2(inputStream);
        OutputStream* outputStream = &(compositePcAndDebugOutputStream.outputStream);
        append(outputStream, NOTIFY_INFRARED_DETECTOR_DETECTION);
        appendHex2(outputStream, type);
        if (useInfrared) {
            // Notify only if we are in a compatible move !
            if ((instructionType == INSTRUCTION_TYPE_BACKWARD) && (type == DETECTOR_BACKWARD_INDEX)) {
                mustNotifyObstacle = true;
            }
            else if ((instructionType == INSTRUCTION_TYPE_FORWARD) && (type == DETECTOR_FORWARD_INDEX)) {
                mustNotifyObstacle = true;
            }
        }
        */
    }
    // Cannot not handle the notification !
    else {
        appendString(getErrorOutputStreamLogger(), "\nNotification lost:\n");
        copyInputToOutputStream(inputStream, getErrorOutputStreamLogger(), NULL, COPY_ALL);
        println(getErrorOutputStreamLogger());
    }
}

--------------------------------
waitForInstruction()


    // Listen instructions from Devices (I2C Slave) -> Main Board (I2C Master)
    /*
    while (handleNotificationFromDispatcherList(TRANSMIT_I2C)) {
        // loop for all notification
        // notification handler must avoid to directly information in notification callback
        // and never to the call back device
    }
    */

    /*
    // Notify to the strategy board the position of the robot
    if (isRobotPositionChanged()) {
        sentStrategyRobotPosition(0, getRobotPositionX(), getRobotPositionY(), getRobotAngle());
        resetRobotPositionChanged();
    }

    if (mustNotifyObstacle) {
        mustNotifyObstacle = false;
        // Obtain robot position
        // Ask the robot position from the MOTOR BOARD
        trajectoryDriverUpdateRobotPosition();

        // compute the obstacle position. If it's outside the table, does nothing
        int obstacleDistance = 350.0f;
        appendStringAndDec(getOutputStreamLogger(INFO), "\nInstruction Type:", instructionType);

        if (instructionType == INSTRUCTION_TYPE_BACKWARD) {
            obstacleDistance = -obstacleDistance;
        }
        if (isObstacleOutsideTheTable(obstacleDistance)) {
            appendString(getOutputStreamLogger(INFO), "\nObstacle OUT side the Table!\n");
        }
        else {
            appendString(getOutputStreamLogger(INFO), "\nObstacle !\n");
            // Send information to Strategy Board
            stopRobotObstacle();
            armDriver2012Up(ARM_LEFT);
            armDriver2012Up(ARM_RIGHT);
            // we are ready for next motion (next loop)
            setReadyForNextMotion(true);
        }
    }

    // Update the current Opponent Robot position
    if (useBalise) {
        updateOpponentRobotIfNecessary();
    }
    */   
	
	--------------------------------------------------------------------------------
	
	/*
bool isObstacleOutsideTheTable(int distance) {
    float a = getRobotAngle() * (PI / 1800.0);
    float dca = cosf(a) * distance;
    float dsa = sinf(a) * distance;
    int obstacleX = getRobotPositionX() + dca;
    int obstacleY = getRobotPositionY() + dsa;
    
    appendStringAndDec(getOutputStreamLogger(INFO), "\nObstacle Position:x=", obstacleX);
    appendStringAndDec(getOutputStreamLogger(INFO), ",y=", obstacleY);
    println(getOutputStreamLogger(INFO));

    
    int BORDER_THRESHOLD = 250;
    int TOTEM_THRESHOLD_X = 250;
    int TOTEM_THRESHOLD_Y = 600;

    // Table border X
    if (obstacleX < BORDER_THRESHOLD || obstacleX > GAME_BOARD_WIDTH - BORDER_THRESHOLD) {
        return true;
    }
    // Table border Y
    if (obstacleY < BORDER_THRESHOLD || obstacleY > GAME_BOARD_HEIGHT - BORDER_THRESHOLD) {
        return true;
    }
    
    // Totem Zone
    if (    (obstacleX > GAME_BOARD_MIDDLE_WIDTH - TOTEM_THRESHOLD_X) 
         && (obstacleX < GAME_BOARD_MIDDLE_WIDTH + TOTEM_THRESHOLD_X)
         && (obstacleY > GAME_BOARD_MIDDLE_HEIGHT - TOTEM_THRESHOLD_Y) 
         && (obstacleY < GAME_BOARD_MIDDLE_HEIGHT - TOTEM_THRESHOLD_Y)) {
        return true;
    }
    return false;
}
*/

---------------------------------------------
main


    // pingDriverDataDispatcherList(getOutputStreamLogger(DEBUG));

    // Inform PC waiting
    showWaitingStart(&pcOutputStream);

    // wait other board initialization
    delaymSec(1500);

    // 2012 VALUE
    unsigned int configValue = getConfigValue();
    unsigned int homologationIndex = configValue & CONFIG_STRATEGY_MASK;
    unsigned int color = configValue & CONFIG_COLOR_BLUE_MASK;

    appendString(getOutputStreamLogger(ALWAYS), "Homologation:");
    appendCRLF(getOutputStreamLogger(ALWAYS));
    appendDec(getOutputStreamLogger(ALWAYS), homologationIndex);
    
    appendString(getOutputStreamLogger(ALWAYS), "Config:");
    appendHex4(getOutputStreamLogger(ALWAYS), configValue);
    appendCRLF(getOutputStreamLogger(ALWAYS));
    useBalise = configValue & CONFIG_USE_BALISE_MASK;
    useInfrared = configValue & CONFIG_USE_SONAR_MASK;

    if (color != 0) {
        appendString(getOutputStreamLogger(ALWAYS), "COLOR:VIOLET\n");
    }
    else {
        appendString(getOutputStreamLogger(ALWAYS), "COLOR:RED\n");
    }    
    while (1) {
        waitForInstruction();
    }

    // TODO 2012 SV motionDriverMaintainPosition();

    // wait for start
    setInitialPosition(color);

    // notify game strategy
    sendStrategyConfiguration(configValue);

    loopUntilStart(&waitForInstruction);

    // Enable the sonar Status only after start
    setSonarStatus(configValue & CONFIG_USE_SONAR_MASK);

    // mark that match begins
    markStartMatch();

    // write begin of match
    showStarted(&pcOutputStream);

    if (homologationIndex == 0) {
        // MATCH

        while (1) {
            waitForInstruction();

            if (isEnd()) {
                break;
            }
        }
    } else {
        setReadyForNextMotion(true);

        while (1) {
            waitForInstruction();
            homologation(homologationIndex, color);

            // We stop if we are in homologation mode
            if (isRobotMustStop()) {
                motionDriverStop();
                break;
            }

            // ultimate tentative to restart the robot if it is blocked
            forceRobotNextStepIfNecessary();
        }
    }

    showEnd(&lcdOutputStream);

    while (1) {
        // Avoid reboot even at end
    }
