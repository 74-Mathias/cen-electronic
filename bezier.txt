  
  /*
  Point bezierPoints[4];
  bezierPoints[0].x = 0;
  bezierPoints[0].y = 0;

  bezierPoints[1].x = -1;
  bezierPoints[1].y = 4;

  bezierPoints[2].x = 12;
  bezierPoints[2].y = 5;

  bezierPoints[3].x = 10;
  bezierPoints[3].y = 7;

  putString("bezierArcDistances:");
  println();
  putString("t\tx\ty\tdist\tdistAdd");
  println();

  float bezierArcLength = computeBezierArcLength(bezierPoints);
  putString("bezierArcLength:");
  println();  
  sendDec(bezierArcLength);
  println();

 
  putString("Bezier points:");
  println();
  writeBezierSpline(bezierPoints);

  putString("Distances");
  println();

  putString("IndexOfLargestValue");
  println();

  float t;
  float t1;
  for (t = 0; t <= 1; t += 0.05) {
	sendDec((long) (t * 1000));
	putc('\t');

	// computes the distance at t
	float distance = getDistanceLengths(t, bezierPoints);
	sendDec((long) (distance * 1000));
	putc('\t');

	// returns the time at the distance (inverse function)
  	t1 = computeBezierTimeAtDistance(distance);
	sendDec((long) (t1 * 1000));

	println();
  }
  

  while (1) {

  }
  */
}

