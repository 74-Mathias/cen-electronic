#include "stdlib.h"

#include "driverDataDispatcher.h"
#include "driverDataDispatcherList.h"
#include "i2cDriverDataDispatcher.h"

// Device
#include "../../drivers/driver.h"

// I2C management
#include "../../common/delay/delay30F.h"
#include "../../common/i2c/master/i2cMaster.h"
#include "../../common/i2c/master/i2cMasterInputStream.h"
#include "../../common/i2c/master/i2cMasterOutputStream.h"

#include "../../common/io/buffer.h"
#include "../../common/io/inputStream.h"
#include "../../common/io/outputStream.h"
#include "../../common/io/ioUtils.h"
#include "../../common/io/stream.h"

#include "../../common/log/logger.h"
#include "../../common/log/logLevel.h"

#include "../../main/motorBoard/motorBoard.h"

/**
 * The stream to send data through I2C
 */
// temp buffer, shared by every i2cDriverDataDispatcher
// useful only for copyInputToOutputStream !
static char i2cTempBufferArray[I2C_DRIVER_DATA_DISPATCHER_BUFFER_LENGTH];
static Buffer i2cTempBuffer;

/**
 * @private
 * Transmit the buffer through I2C, call the device which write data out to the stream
 */
void _driverDataDispatcherTransmitI2C(DriverDataDispatcher* dispatcher,
        Buffer* requestBuffer,
        Buffer* responseBuffer,
        int dataToTransferCount,
        int dataToReceiveCount
        ) {
    InputStream* requestInputStream = getInputStream(requestBuffer);
    InputStream* i2cMasterInputStream = dispatcher->inputStream;
    OutputStream* i2cMasterOutputStream = dispatcher->outputStream;

    // Copy the buffer to the master outputStream
    copyInputToOutputStream(requestInputStream, i2cMasterOutputStream, NULL, dataToTransferCount);

    // Copy the data from the slave
    OutputStream* responseOutputStream = getOutputStream(responseBuffer);

    // Wait the response : TODO : Have a smaller delay
    unsigned int dataReceived = 0;
    int counter = 0;
    while (dataReceived < dataToReceiveCount) {
        delaymSec(10);
        dataReceived += copyInputToOutputStream(i2cMasterInputStream, responseOutputStream, NULL, 1);
        counter++;
        // Time out
        if (counter > 200) {
			appendString (getErrorOutputStreamLogger(), "Dispatcher:");
			appendString (getOutputStreamLogger(ERROR), dispatcher->name);
			appendString (getOutputStreamLogger(ERROR), "Time out:");
            appendStringAndDec(getOutputStreamLogger(ERROR), "Not enough Data :wanted=", dataToReceiveCount);
            appendStringAndDec(getOutputStreamLogger(ERROR), ",received=", getBufferElementsCount(responseBuffer));
            break;
        }
    }
    // printDebugBuffer(getOutputStreamLogger(ERROR), responseBuffer);
}

/**
 * Add the i2c driver data dispatcher to the list.
 * @param i2cAddress
 */
void addI2CDriverDataDispatcher(DriverDataDispatcher* i2cDispatcher,
        char* dispatcherName,
        Buffer* i2cMasterInputBuffer,
		char (*i2cMasterInputBufferArray)[],
		unsigned char i2cMasterInputBufferLength,
        InputStream* i2cMasterInputStream,
        OutputStream* i2cMasterOutputStream,
        int i2cAddress) {
    // Configure i2c Dispatcher
    i2cDispatcher->transmitMode = TRANSMIT_I2C;
    i2cDispatcher->name = dispatcherName;
    i2cDispatcher->address = i2cAddress;
    i2cDispatcher->driverDataDispatcherTransmitData = _driverDataDispatcherTransmitI2C;

    // Init the output Stream : I2C Master -> I2C Slave(address)
    initBuffer(&i2cTempBuffer, &i2cTempBufferArray, I2C_DRIVER_DATA_DISPATCHER_BUFFER_LENGTH, "I2C Output", "global");
    initMasterI2cOutputStream(i2cMasterOutputStream, &i2cTempBuffer, i2cAddress);

    // Init the input Stream : I2C Slave (address) -> I2C Master
    initBuffer(i2cMasterInputBuffer, i2cMasterInputBufferArray, i2cMasterInputBufferLength, "I2C Input", dispatcherName);
    initMasterI2cInputStream(i2cMasterInputBuffer, i2cMasterInputStream, i2cAddress);

    i2cDispatcher->inputStream = i2cMasterInputStream;
    i2cDispatcher->outputStream = i2cMasterOutputStream;

    // add to the list
    addDriverDataDispatcher(i2cDispatcher);

    // Clear previous data to avoid buffer from the other board
    clearInputStream(i2cMasterInputStream);
}

